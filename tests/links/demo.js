#!/usr/bin/env node

// demo.js ‚Äî Demonstra√ß√£o do crawler de links
const fs = require('fs-extra');
const path = require('path');

class LinksCrawlerDemo {
    constructor() {
        this.baseUrl = process.env.BASE_URL || 'http://localhost';
    }

    async run() {
        console.log('üï∑Ô∏è Demonstra√ß√£o do Crawler de Links Internos');
        console.log('=' .repeat(50));
        
        // Verificar estrutura de arquivos
        await this.checkFileStructure();
        
        // Mostrar configura√ß√µes
        this.showConfiguration();
        
        // Mostrar comandos dispon√≠veis
        this.showCommands();
        
        // Mostrar exemplos de uso
        this.showExamples();
        
        console.log('\nüöÄ Para come√ßar:');
        console.log('  npm run links:install  # Instalar depend√™ncias');
        console.log('  npm run links:crawl   # Executar crawler');
    }

    async checkFileStructure() {
        console.log('\nüìÅ Verificando estrutura de arquivos...');
        
        const files = [
            'package.json',
            'crawler.js',
            'demo.js',
            'README.md'
        ];
        
        let existing = 0;
        let missing = 0;
        
        for (const file of files) {
            const exists = await fs.pathExists(path.join(__dirname, file));
            if (exists) {
                console.log(`‚úÖ ${file}`);
                existing++;
            } else {
                console.log(`‚ùå ${file}`);
                missing++;
            }
        }
        
        console.log(`\nüìä Arquivos: ${existing} ‚úÖ | ${missing} ‚ùå`);
        
        if (missing === 0) {
            console.log('üéâ Estrutura completa!');
        } else {
            console.log('‚ö†Ô∏è Alguns arquivos est√£o faltando.');
        }
    }

    showConfiguration() {
        console.log('\n‚öôÔ∏è Configura√ß√£o:');
        console.log(`  Base URL: ${this.baseUrl}`);
        console.log('  Profundidade m√°xima: 3 n√≠veis');
        console.log('  Rate limit: 3 req/s');
        console.log('  Timeout: 10s por requisi√ß√£o');
        console.log('  M√°ximo de tentativas: 2');
        console.log('  Dom√≠nio: Apenas /public/ (interno)');
    }

    showCommands() {
        console.log('\nüìã Comandos dispon√≠veis:');
        console.log('  npm run links:install  # Instalar depend√™ncias');
        console.log('  npm run links:crawl    # Executar crawler completo');
        console.log('  npm run links:demo     # Esta demonstra√ß√£o');
        console.log('  npm run links:clean    # Limpar arquivos gerados');
    }

    showExamples() {
        console.log('\nüí° Exemplos de uso:');
        console.log('');
        console.log('# Crawler b√°sico');
        console.log('npm run links:crawl');
        console.log('');
        console.log('# Crawler com URL inicial personalizada');
        console.log('npm run links:crawl -- --start=/public/usuarios.php');
        console.log('');
        console.log('# Crawler com profundidade personalizada');
        console.log('npm run links:crawl -- --max-depth=2');
        console.log('');
        console.log('# Crawler ignorando padr√µes espec√≠ficos');
        console.log('npm run links:crawl -- --skip="logout|download"');
        console.log('');
        console.log('# Crawler com autentica√ß√£o');
        console.log('export TEST_USERNAME=admin');
        console.log('export TEST_PASSWORD=admin123');
        console.log('npm run links:crawl');
    }

    showFeatures() {
        console.log('\nüéØ Funcionalidades:');
        console.log('‚úÖ Descoberta autom√°tica de links internos');
        console.log('‚úÖ Verifica√ß√£o de status HTTP (200, 404, 500)');
        console.log('‚úÖ Medi√ß√£o de tempo de resposta (TTFB)');
        console.log('‚úÖ Verifica√ß√£o de assets (CSS, JS, IMG)');
        console.log('‚úÖ Detec√ß√£o de redirecionamentos em loop');
        console.log('‚úÖ Autentica√ß√£o autom√°tica');
        console.log('‚úÖ Rate limiting (3 req/s)');
        console.log('‚úÖ Relat√≥rios HTML e JSON');
        console.log('‚úÖ Filtros e busca no relat√≥rio');
        console.log('‚úÖ C√≥digo de sa√≠da baseado em erros');
    }

    showOutputs() {
        console.log('\nüìä Sa√≠das geradas:');
        console.log('üìÑ report.html - Relat√≥rio HTML interativo');
        console.log('üìã report.json - Dados detalhados em JSON');
        console.log('üìà Estat√≠sticas: p√°ginas, links, assets, erros');
        console.log('üîç Filtros: por status, profundidade, busca');
        console.log('üì± Responsivo: funciona em mobile e desktop');
    }
}

// Executar se chamado diretamente
if (require.main === module) {
    const demo = new LinksCrawlerDemo();
    demo.run().catch(console.error);
}

module.exports = LinksCrawlerDemo;
